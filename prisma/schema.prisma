// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SummaryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FileType {
  TXT
  DOCX
  PDF
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  meetings     Meeting[]
  shares       Share[]
}

model Meeting {
  id              String   @id @default(cuid())
  title           String
  originalContent String   @db.Text 
  fileType        FileType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ownerId         String
  owner           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  summary         Summary?  
  shares          Share[]   
}

model Summary {
  id        String        @id @default(cuid())
  content   Json?         
  status    SummaryStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  meetingId String  @unique
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model Share {
  id          String   @id @default(cuid())
  sharedAt    DateTime @default(now())

  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([meetingId, recipientId]) 
}
